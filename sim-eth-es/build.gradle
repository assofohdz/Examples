buildscript {
    repositories {
        jcenter()
    }   
    dependencies {
        // Replace $version with the current version
        classpath "com.smokejumperit.gradle.license:Gradle-License-Report:0.0.2"
    }   
}

evaluationDependsOnChildren()

allprojects {
    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots"}
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven {url "https://plugins.gradle.org/m2/"}
        mavenCentral()
    }
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'license-report'

mainClassName='example.Main'

if (!hasProperty('mainClass')) {
    ext.mainClass = mainClassName
}

jar {
    manifest {
        attributes 'Main-Class': 'example.Main'
    }
}
ext.jmeVersion = "3.2.1-stable"

project(":assets") {
    apply plugin: 'java'
    buildDir = rootProject.file("build/assets")
    
    sourceSets {
        main {
            resources {
                srcDir '.'
            }
        }
    }    
}



dependencies {
    
    // https://mvnrepository.com/artifact/com.google.code.findbugs/jsr305
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
    
    compile project(':interface')
    
    compile 'junit:junit:4.12'
    
    //jWalkable for 2d polygonal pathfinding
    compile 'com.github.implicit-invocation:jwalkable:master-SNAPSHOT'
 
    //GDX-AI for steering behaviours
    compile "com.badlogicgames.gdx:gdx-ai:1.8.1:sources"
    compile "com.badlogicgames.gdx:gdx-ai:1.8.1:javadoc"
    compile "com.badlogicgames.gdx:gdx-ai:1.8.1"
    
    //Mapeditor format support
    compile 'org.mapeditor:libtiled:0.17-SNAPSHOT'
    
    // Need at least basic JME
    compile("org.jmonkeyengine:jme3-core:$jmeVersion") {
        // For some reason if I don't do this then it picks up alpha4 instead
        // of beta2-SNAPSHOT.
        force = true
    }
    compile "org.jmonkeyengine:jme3-desktop:$jmeVersion"
    compile "org.jmonkeyengine:jme3-lwjgl:$jmeVersion"
    compile("org.jmonkeyengine:jme3-networking:$jmeVersion") {
        force = true;
    }
 
    // We definitely want a UI
    compile "com.simsilica:lemur:1.9.1"
    compile "com.simsilica:lemur-proto:1.9.1"

    // And our base code for sim-etheral, SiO2, etc.
    // (many of these need to be built locally and 'gradle install'ed as of this writing)
    compile "com.simsilica:sio2:1.1.0"
    compile "com.simsilica:sim-math:1.1.1"
    //compile "com.simsilica:sim-ethereal:1.2.2"
    compile 'com.github.Simsilica:SimEthereal:-SNAPSHOT' //There is an unreleased commit that we need
    compile 'com.simsilica:zay-es-net:1.2.1'
    compile 'com.simsilica:zay-es:1.2.1'

    // Standard utility stuff
    compile 'com.google.guava:guava:24.1-jre'
    compile 'org.slf4j:slf4j-api:1.7.13'
    runtime 'org.apache.logging.log4j:log4j-slf4j-impl:2.5'
    
    //Dyn4j
    compile 'org.dyn4j:dyn4j:3.2.3'
    
    //Ini4j to parse settings files
    compile 'org.ini4j:ini4j:0.5.4'
    
    //HSQLDB
    runtime 'org.hsqldb:hsqldb:2.3.4'
    runtime project(':assets')    
}


task wrapper(type: Wrapper) {
}

task runServer(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "example.net.server.GameServer"
    jvmArgs '-Dlog4j.configurationFile=server-log4j2.xml'
    standardInput = System.in
}

// Create a custom server start script in the distribution
task serverStartScript(type: CreateStartScripts) {
    mainClassName = "example.net.server.GameServer"
    applicationName = "server"
    outputDir = new File(project.buildDir, 'scripts')
    classpath = jar.outputs.files + project.configurations.runtime
    defaultJvmOpts = ['-Dlog4j.configurationFile=server-log4j2.xml']
}

/*applicationDistribution.into("bin") {
from(serverStartScript)
fileMode = 0755
}*/

// I think this is ultimately clearer than the above
distributions {
    main {
        contents {
            from(serverStartScript) {
                into "bin"
            }
            into("bin/modules") {
                from { project(':modules').jar }
            }
        }
    }
}

// Either way we end up with dupes if we don't do this
distZip {
    duplicatesStrategy = 'exclude'
}

def gradle = project.getGradle()
new File("${gradle.getGradleUserHomeDir().getAbsolutePath()}/daemon/${gradle.getGradleVersion()}").listFiles().each {
    if (it.getName().endsWith('.out.log')) {
        logger.debug("Cleaning up daemon log file $it")
        it.delete()
    }
}


project(':interface'){
    apply plugin:'java'
    
    buildDir = rootProject.file("build/interface")
    
    sourceSets {
        main {
            java {
                srcDir '.'
            }
        }
    }
    
    dependencies {
        compile "com.simsilica:sim-math:1.1.1"
        compile "com.simsilica:sio2:1.1.0"
        compile 'com.simsilica:zay-es:1.2.1'
        compile 'org.dyn4j:dyn4j:3.2.3'
        compile 'com.github.implicit-invocation:jwalkable:master-SNAPSHOT'
        compile 'org.ini4j:ini4j:0.5.4'
    }
}

project(':modules') {
    apply plugin: 'java'
        
    buildDir = rootProject.file("build/modules")
    
    sourceSets {
        main {
            java {
                srcDir '.'
                exclude '**ini'
            }
            resources {
                srcDir '.'
                exclude '**java'
            }
        }
    }
    
    dependencies {
        compile project(':interface')
        compile 'com.github.Simsilica:SimEthereal:-SNAPSHOT' //There is an unreleased commit that we need
        compile 'com.simsilica:zay-es-net:1.2.1'
        compile 'com.simsilica:zay-es:1.2.1'
    }
}


