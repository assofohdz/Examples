buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots"}
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url "https://plugins.gradle.org/m2/"}
    }   
    dependencies {
        // Replace $version with the current version
        classpath "com.smokejumperit.gradle.license:Gradle-License-Report:0.0.2"
        //https://github.com/mini2Dx/gradle-butler-plugin
        classpath group: 'org.mini2Dx', name: 'butler', version: '1.1.3'
        //https://github.com/mini2Dx/parcl
        classpath group: 'org.mini2Dx', name: 'parcl', version: '1.4.0'
    }   
}

plugins {
    id 'com.gradle.build-scan' version '2.1'
    id 'com.bmuschko.docker-java-application' version '4.5.0'
    id "com.github.ben-manes.versions" version '0.20.0'
}

allprojects {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots"}
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url "https://plugins.gradle.org/m2/"}
    }
}


apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'license-report'
apply plugin: "org.mini2Dx.butler"
apply plugin: "org.mini2Dx.parcl"

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

project.version = getVersionName()

mainClassName='infinity.Main'

if (!hasProperty('mainClass')) {
    ext.mainClass = mainClassName
}

jar {
    manifest {
        attributes 'Main-Class': 'infinity.Main'
    }
}
ext.jmeVersion = "3.2.2-stable"

project(":assets") {
    apply plugin: 'java'
    buildDir = rootProject.file("build/assets")
    
    sourceSets {
        main {
            resources {
                srcDir '.'
            }
        }
    }    
}

//Simsilica versions:
ext.simMathVersion = "1.4.0-SNAPSHOT"
ext.simEtherealVersion = "1.5.0-SNAPSHOT"
ext.simSiO2Version = "1.3.0"
ext.simZayESNetVersion = "1.4.0"
ext.simZayESVersion = "1.3.1"

dependencies {
    
    compile 'org.apache.commons:commons-math:2.2'
    
    //https://mvnrepository.com/artifact/com.google.code.findbugs/jsr305
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
    
    compile project(':interface')
    
    //https://junit.org/junit5/
    compile 'junit:junit:4.12'
    
    //jWalkable for 2d polygonal pathfinding
    //https://github.com/implicit-invocation/jwalkable
    compile 'com.github.implicit-invocation:jwalkable:master-SNAPSHOT'
 
    //GDX-AI for steering behaviours
    //https://github.com/libgdx/gdx-ai
    //compile "com.badlogicgames.gdx:gdx-ai:1.8.1:sources"
    //compile "com.badlogicgames.gdx:gdx-ai:1.8.1:javadoc"
    compile "com.badlogicgames.gdx:gdx-ai:1.8.1"
    
    //Mapeditor format support
    //https://github.com/bjorn/tiled
    compile 'org.mapeditor:libtiled:0.17-SNAPSHOT'
    
    // Need at least basic JME
    //https://github.com/jMonkeyEngine
    compile("org.jmonkeyengine:jme3-core:$jmeVersion") {
        // For some reason if I don't do this then it picks up alpha4 instead
        // of beta2-SNAPSHOT.
        force = true
    }
    compile "org.jmonkeyengine:jme3-desktop:$jmeVersion"
    compile "org.jmonkeyengine:jme3-lwjgl:$jmeVersion"
    compile "org.jmonkeyengine:jme3-effects:$jmeVersion"
    compile("org.jmonkeyengine:jme3-networking:$jmeVersion") {
        force = true;
    }
 
    // We definitely want a UI
    //https://github.com/jMonkeyEngine-Contributions/Lemur
    compile 'com.simsilica:lemur:1.12.0'
    compile 'com.simsilica:lemur-proto:1.10.0'

    // And our base code for sim-etheral, SiO2, etc.
    // (many of these need to be built locally and 'gradle install'ed as of this writing)
    

    //https://github.com/Simsilica/SiO2
    compile "com.simsilica:sio2:$simSiO2Version"
    //https://github.com/Simsilica/SimMath
    compile "com.simsilica:sim-math:$simMathVersion"
    //https://github.com/Simsilica/SimEthereal
    compile "com.simsilica:sim-ethereal:$simEtherealVersion"
    
    //https://github.com/jMonkeyEngine-Contributions/zay-es
    compile "com.simsilica:zay-es-net:$simZayESNetVersion"
    compile "com.simsilica:zay-es:$simZayESVersion"

    //Lights and Visibility
    //https://github.com/libgdx/box2dlights
    compile "com.badlogicgames.box2dlights:box2dlights:1.5-SNAPSHOT"
    
    //2d polygon lib for lighting and pathfinding
    //https://github.com/rpax/straightedge
    //compile 'com.massisframework:straightedge:0
    //.8'
    // Standard utility stuff
    //https://github.com/google/guava
    compile 'com.google.guava:guava:27.0.1-jre'
    //https://www.slf4j.org/
    compile 'org.slf4j:slf4j-api:1.7.13'
    //https://logging.apache.org
    runtime 'org.apache.logging.log4j:log4j-slf4j-impl:2.5'
    
    //Dyn4j
    //http://www.dyn4j.org/
    compile 'org.dyn4j:dyn4j:3.3.0'
    
    //Ini4j to parse settings files
    //http://ini4j.sourceforge.net/
    compile 'org.ini4j:ini4j:0.5.4:sources'
    compile 'org.ini4j:ini4j:0.5.4:javadoc'
    
    
    //Noise4j dungeon generation
    //https://github.com/czyzby/noise4j
    compile 'com.github.czyzby:noise4j:0.1.0'
    
    //HSQLDB
    //http://hsqldb.org/
    runtime 'org.hsqldb:hsqldb:2.3.4'
    runtime project(':assets')    
    
    //SteamWorks4J
    //https://github.com/code-disaster/steamworks4j
    compile "com.code-disaster.steamworks4j:steamworks4j:1.8.0"
    compile "com.code-disaster.steamworks4j:steamworks4j-server:1.8.0"
}

task runServer(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "infinity.net.server.GameServer"
    jvmArgs '-Dlog4j.configurationFile=server-log4j2.xml'
    standardInput = System.in
}

// Create a custom server start script in the distribution
task serverStartScript(type: CreateStartScripts) {
    mainClassName = "infinity.net.server.GameServer"
    applicationName = "server"
    outputDir = new File(project.buildDir, 'scripts')
    classpath = jar.outputs.files + project.configurations.runtime
    defaultJvmOpts = ['-Dlog4j.configurationFile=server-log4j2.xml']
}

task myJavadocs(type: Javadoc) {
    source = sourceSets.main.allJava
}
/*applicationDistribution.into("bin") {
from(serverStartScript)
fileMode = 0755
}*/

// I think this is ultimately clearer than the above
distributions {
    main {
        contents {
            from(serverStartScript) {
                into "bin"
            }
            into("bin/modules") {
                from { project(':modules').jar }
            }
        }
    }
}

// Either way we end up with dupes if we don't do this
distZip {
    duplicatesStrategy = 'exclude'
}

def gradle = project.getGradle()
new File("${gradle.getGradleUserHomeDir().getAbsolutePath()}/daemon/${gradle.getGradleVersion()}").listFiles().each {
    if (it.getName().endsWith('.out.log')) {
        logger.debug("Cleaning up daemon log file $it")
        it.delete()
    }
}

project(':interface'){
    apply plugin:'java'
    
    buildDir = rootProject.file("build/interface")
    
    sourceSets {
        main {
            java {
                srcDir '.'
            }
        }
    }
    
    dependencies {
        compile "com.simsilica:sim-math:$simMathVersion"
        compile "com.simsilica:sio2:$simSiO2Version"
        compile "com.simsilica:zay-es:$simZayESVersion"
        compile 'org.dyn4j:dyn4j:3.3.0'
        compile 'com.github.implicit-invocation:jwalkable:master-SNAPSHOT'
        compile 'org.ini4j:ini4j:0.5.4'
    }
}

project(':modules') {
    apply plugin: 'java'
        
    buildDir = rootProject.file("build/modules")
    
    sourceSets {
        main {
            java {
                srcDir '.'
                exclude '**ini'
            }
            resources {
                srcDir '.'
                exclude '**java'
            }
        }
    }
    
    dependencies {
        compile project(':interface')
        compile "com.simsilica:sim-ethereal:$simEtherealVersion"
        compile "com.simsilica:zay-es-net:$simZayESNetVersion"
        compile "com.simsilica:zay-es:$simZayESVersion"
    }
}

parcl {
    exe {
        exeName = "infinity"
    }
		
    app {
        appName = "Subspace Infinity"
        icon = "infinity_icon.ico"
        applicationCategory = "public.app-category.adventure-games"
        displayName = 'Subspace Infinity'
        identifier = 'infinity'
        copyright = 'Copyright 2018 Asser Fahrenholz'
    }
		
}
butler {
    user = "assofohdz"
    game = "subspace-infinity"
    updateButler = false
    alphaChannel = false
    betaChannel = false
    userVersion = project.version
 
    windows {
        butlerInstallDirectory = "C:\\Users\\asser\\AppData\\Roaming\\itch\\bin"
        binDirectory = new File(project.buildDir, "windows").getAbsolutePath()
    }
    butlerPush.dependsOn bundleNative
}

docker {
    javaApplication {
        //baseImage = 'dockerfile/java:openjdk-8-jre'
        maintainer = 'Asser Fahrenholz'
        ports = [4271]
        tag = 'assofohdz/ssinf:latest'
        
        exec {
            //defaultCommand 'server'
            entryPoint '/subspace-infinity/bin/server'
        }
    }
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}